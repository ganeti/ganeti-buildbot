# -*- python -*-
# ex: set syntax=python:

# Copyright (C) 2013 Google Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Note: parts of this file come from the sample master config created
# by buildbot.


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import functools
import itertools
import os
import re
from cStringIO import StringIO

from buildbot.buildslave import BuildSlave
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import filter
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.process.buildstep import SUCCESS, FAILURE, SKIPPED
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot import revlinks
from buildbot.scheduler import Scheduler, AnyBranchScheduler, Try_Jobdir
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.steps import source
from buildbot.steps.python import BuildEPYDoc
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, SetProperty
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

GANETI_GIT_URL = "git://git.ganeti.org/ganeti.git"

MAKE = ["make", "-j4"]

MASTER_BRANCH = "master"

# helper function
def GetBranches(*args):
  """Returns stable and devel branches for versions passed as arguments.

  """
  return ["%s-%s" % (name, ver)
          for ver in args
          for name in ["stable"]]


UNITTEST_BRANCHES = [MASTER_BRANCH] + GetBranches(
  "2.6", "2.7", "2.8", "2.9", "2.10", "2.11", "2.12", "2.13", "2.14", "2.15", "2.16", "2.17")
# KVM supported from 2.10 on, add new versions here
KVM_QA_BRANCHES = [MASTER_BRANCH] + GetBranches(
  "2.10", "2.11", "2.12", "2.13", "2.14", "2.15", "2.16", "2.17")
# vcluster is implemented from 2.9 on, add new versions here
VCLUSTER_QA_BRANCHES = [MASTER_BRANCH] + GetBranches(
  "2.9", "2.10", "2.11", "2.12", "2.13", "2.14", "2.15", "2.16", "2.17")

QA_FULL = "full"
QA_QUICK = "quick"
QA_TINY = "tiny"

LIB_DIR = os.path.join(os.path.dirname(__file__), "../../lib")
SCRIPTS_DIR = os.path.join(LIB_DIR, "scripts")
BUILD_LOG_DIR = "/var/www/logs"

(QA_MODE_SRC,
 QA_MODE_PKG) = range(10, 12)

QA_MODE_ALL = frozenset([
  QA_MODE_SRC,
  QA_MODE_PKG
  ])

class QaCommand(ShellCommand):
  TIME_RE = re.compile("^---- 20\d\d-\d\d-\d\d .*"
                       " time=(\d+):(\d+):(\d+).(\d+) (.*)$")
  END_RE = re.compile(" -+$")

  def createSummary(self, log):
    """Add html and raw QA speed stats"""

    sio = StringIO(log.getText())
    stats = {}
    for line in sio.readlines():
      match = self.TIME_RE.match(line)
      if not match:
        continue
      (hrs, mins, secs, milisecs, name) = match.group(1, 2, 3, 4, 5)
      duration = (int(hrs) * 3600 + int(mins) * 60 + int(secs) +
                  float(milisecs) / 1000000)
      if self.END_RE.search(name):
        name = self.END_RE.sub("", name)
      if name not in stats:
        stats[name] = [0, 0]
      stats[name][0] += duration
      stats[name][1] += 1
    slist = [(k, v[0], v[1]) for k, v in stats.items()]
    slist.sort(key=lambda x: x[1], reverse=True)
    output = ["<table>\n<tr><th>Name</th><th>Total duration [s]</th>"
              "<th>Event count</th><th>Avg. duration [s]</th></tr>"]
    output.extend(["<tr><td>%s</td>"
                   "<td style='text-align: right'>%.3f</td>"
                   "<td style='text-align: right'>%d</td>"
                   "<td style='text-align: right'>%.3f</td>"
                   "</tr>"
                   % (item[0], item[1], item[2], item[1] / item[2])
                   for item in slist])
    output.append("</table>")
    self.addHTMLLog("speed-stats", "\n".join(output))
    raw_stats = ["%.3f %d %s" % (item[1], item[2], item[0].replace(" ", "_"))
                 for item in slist]
    self.addCompleteLog("raw-stats", "\n".join(raw_stats))

    self.addURL("logs", "/logs/%s/" % self.getProperty("logdir_relative"))

def GetShortHost(hostname):
  return hostname.split(".")[0]

def GenerateResetPerms(before):
  if before:
    name = "before"
  else:
    name = "after"
  return ShellCommand(command=["chmod", "-R", "u+w", "."],
                      name="cleanup-builddir-%s" % name,
                      description=["resetting", "permissions"],
                      descriptionDone=["permissions"],
                      alwaysRun=True,
                      usePTY=False)

def GenerateCheckout(branch, mode="copy"):
  if mode is None:
    mode = "copy"

  return source.Git(repourl=GANETI_GIT_URL,
                    name="git-checkout",
                    branch=branch,
                    mode=mode,
                    haltOnFailure=True)

def GenerateAutogen():
  return ShellCommand(command=["./autogen.sh"],
                      name="autogen",
                      description="bootstrapping",
                      descriptionDone="bootstrap",
                      haltOnFailure=True,
                      usePTY=False)

def GenerateConfigure(*args):
  return ShellCommand(command=["./configure"] + list(args),
                      name="configure",
                      description="configuring",
                      descriptionDone="configure",
                      haltOnFailure=True,
                      usePTY=False)

def GenerateMake():
  return ShellCommand(command=MAKE,
                      name="build",
                      description=["building"],
                      descriptionDone="build",
                      haltOnFailure=True,
                      usePTY=False)

def GenerateMakeLint():
  return ShellCommand(command=MAKE + ["lint", "LINT_OPTS=-f parseable"],
                      name="lint",
                      description=["running", "lint"],
                      descriptionDone="lint",
                      haltOnFailure=False,
                      usePTY=False)

def GenerateMakeCheck(dist):
  if dist:
    cmd = "distcheck"
  else:
    cmd = "check"
  return ShellCommand(command=MAKE + [cmd],
                      name=cmd,
                      description=["running", cmd],
                      descriptionDone=cmd,
                      haltOnFailure=True,
                      usePTY=False)

def GenerateUpload(machines):
  return [
    ShellCommand(command=["devel/upload", "--no-restart"] + machines,
                 name="upload",
                 description=["uploading sources"],
                 descriptionDone="upload",
                 want_stderr=True,
                 haltOnFailure=True,
                 usePTY=False),
    ]

def MakeFileCopies(hostname, copies):
  short_host = GetShortHost(hostname)

  return [
    ShellCommand(command=["rsync", "-v", "-e", "/usr/bin/ssh -l root", src, "%s:%s" % (hostname, dst)],
                 name="copy-%s-%s" % (short_host, os.path.basename(src)),
                 description=["uploading", src],
                 descriptionDone=["uploaded", src],
                 timeout=180,
                 usePTY=False,
                 haltOnFailure=True)
    for (src, dst) in copies]

def MakeCleanupSteps(hostname, master_ip, master_netdev, remove_sources):
  short_host = GetShortHost(hostname)

  filecopies = [
    ("qa-cleanup", "qa-cleanup"),
    ("qa-cleanup-logs", "qa-cleanup-logs"),
    ]

  cmd = StringIO()
  cmd.write("MASTER_IP=%s MASTER_NETDEV=%s ./qa-cleanup && ./qa-cleanup-logs" %
             (master_ip, master_netdev))

  if remove_sources:
    filecopies.append(("qa-cleanup-sources", "qa-cleanup-sources"))
    cmd.write(" && ./qa-cleanup-sources")

  steps = MakeFileCopies(hostname, filecopies)

  steps.extend([
    ShellCommand(command=["ssh", "root@%s" % hostname, cmd.getvalue()],
                 name="cleanup-node-%s" % short_host,
                 description=["cleaning", short_host],
                 descriptionDone=["clean", short_host],
                 timeout=900,  # 15 minutes is enough to shutdown xen
                               # domains and DRBD; otherwise,
                               # something's stuck
                 usePTY=False,
                 haltOnFailure=True),
    ])

  return steps


def GenerateLogCollection(machines):
  return [
    ShellCommand(command=["./collect-logs", "buildlogs.tar.xz"] + machines,
                 name="collect-logs",
                 description=["collecting logs"],
                 descriptionDone="collected logs",
                 want_stderr=True,
                 haltOnFailure=False,
                 alwaysRun=True,
                 usePTY=False),
    MasterShellCommand(command=WithProperties("umask 0022 &&"
                                              " mkdir -p -m 0755 %(logdir)s"),
                       name="mklogdir",
                       description=["creating", "log", "directory"],
                       descriptionDone=["created", "log", "directory"],
                       usePTY=False),
    FileUpload(slavesrc="buildlogs.tar.xz",
               masterdest=WithProperties("%(logdir)s/data.tar.xz"),
               mode=0644,
               name="upload-logs",
               haltOnFailure=False,
               alwaysRun=True),
    ]


def GenerateRunQA(fn):
  (workdir, env, cmd) = fn()

  # the timeout is 2.5hrs: there's currently a bad interaction between
  # the watcher (global locks) and individual jobs, which can make
  # this take a long while, depending on the luck of the person
  # wanting to run the QA
  return QaCommand(command=cmd,
                   description=["running QA"],
                   name="ganeti-qa",
                   descriptionDone="run QA",
                   timeout=int(2.5 * 3600),
                   env=env,
                   workdir=workdir,
                   usePTY=False)

def MakeQaSteps(mode, machines, master_ip, master_netdev, config_download_fn,
                build_fn, upload_fn, qa_cmd_fn):
  assert mode in QA_MODE_ALL

  steps = [
    GenerateResetPerms(True),
    SetProperty(command="echo %s" % BUILD_LOG_DIR,
                property="logdir_root", name="prop-logdir_root"),
    SetProperty(command=WithProperties("echo %(buildername)s/build%(buildnumber)s"),
                property="logdir_relative", name="prop-logdir_relative"),
    SetProperty(command=WithProperties("echo %(logdir_root)s/%(logdir_relative)s"),
                property="logdir", name="prop-logdir"),
    ]

  if build_fn:
    steps.extend(build_fn())

  steps.extend(config_download_fn())

  steps.extend([
    FileDownload(mastersrc=os.path.join(SCRIPTS_DIR, filename),
                 slavedest=filename,
                 name="download-%s" % filename,
                 mode=0755)
    for filename in ["qa-cleanup", "qa-cleanup-sources", "qa-cleanup-logs",
                     "collect-logs"]
    ])

  steps.extend(itertools.chain(*[MakeCleanupSteps(hostname, master_ip,
                                                  master_netdev,
                                                  (mode == QA_MODE_SRC))
                                 for hostname in machines]))

  steps.extend(upload_fn(machines))

  steps.append(GenerateRunQA(qa_cmd_fn))
  steps.extend(GenerateLogCollection(machines))
  steps.append(GenerateResetPerms(False))

  return steps


fdoclint = factory.BuildFactory(steps=[
  GenerateResetPerms(True),
  GenerateCheckout(MASTER_BRANCH),
  GenerateAutogen(),
  # Unknown options are ignored by configure
  GenerateConfigure("--enable-htools", "--enable-confd=haskell",
                    "--enable-haskell-tests",
                    "--enable-manpages-in-doc",
                    "--prefix=/usr",
                    "--sysconfdir=/etc",
                    "--localstatedir=/var",
                    "--with-ssh-initscript=service sshd"),
  GenerateMake(),
  ShellCommand(command=MAKE + ["apidoc"],
               name="API docs",
               description=["building", "API", "docs"],
               descriptionDone=["API", "docs"],
               usePTY=False),
  ShellCommand(command=MAKE + ["lint", "LINT_OPTS=-f parseable"],
               name="lint",
               description=["running", "lint"],
               descriptionDone="lint",
               usePTY=False),

  ShellCommand(command=MAKE + ["check-local"],
               name="check-local",
               description=["running", "check-local"],
               descriptionDone="check-local",
               haltOnFailure=True,
               usePTY=False),

  ShellCommand(command=MAKE + [
        "distcheck-release",
        "DISTCHECK_CONFIGURE_FLAGS=--enable-htools --enable-confd=haskell --enable-haskell-tests",
        ],
               name="distcheck",
               description=["running", "distcheck-release"],
               descriptionDone="distcheck",
               haltOnFailure=True,
               usePTY=False),

  ShellCommand(command=MAKE + ["distrebuildcheck"],
               name="distrebuildcheck",
               description=["running", "distrebuildcheck"],
               descriptionDone="distrebuildcheck",
               haltOnFailure=True,
               usePTY=False),

  # Generate coverage (needs the vcs_version property set)
  ShellCommand(command=MAKE + ["coverage"],
               name="coverage",
               description=["running", "coverage"],
               descriptionDone=["coverage"],
               haltOnFailure=True,
               usePTY=False),

  GenerateResetPerms(False),
  ])

####### Actual configuration starts here

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

slavepass = open("pass").read().strip()

test_slaves = [
  "wheezy64",
  "jessie64",
  "fedora18-64",
  "ubuntu1304-64",
  ]

# this will contain more in the future...
slaves = test_slaves

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = [BuildSlave("bot-%s" % slavename, slavepass)
               for slavename in slaves]

c['slaves'].extend([BuildSlave("bot-qa-vcluster", slavepass, max_builds=1)])

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find
# out about source code changes.

c['change_source'] = []
for branch in UNITTEST_BRANCHES:
  c['change_source'].append(GitPoller(
        GANETI_GIT_URL,
        workdir='gitpoller-workdir-%s' % branch, branch=branch,
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'unittests' build

test_builders = ["tests-%s" % name for name in test_slaves]
all_builders = test_builders + ["qa-vcluster-tiny", "qa-kvm-tiny", "doclint"]

c['schedulers'] = [
  # Unittest scheduler
  AnyBranchScheduler(name="all",
                     branches=UNITTEST_BRANCHES,
                     treeStableTimer=30,
                     builderNames=test_builders),

  # Doclint builder
  AnyBranchScheduler(name="doclint",
                     branches=UNITTEST_BRANCHES,
                     treeStableTimer=30,
                     builderNames=["doclint"]),

  # Quick QA scheduler for VCluster
  AnyBranchScheduler(name="qa-vcluster-tiny",
                     branches=VCLUSTER_QA_BRANCHES,
                     treeStableTimer=60,
                     builderNames=["qa-vcluster-tiny"]),
  # Quick QA scheduler for kvm
  AnyBranchScheduler(name="qa-kvm-tiny",
                     branches=KVM_QA_BRANCHES,
                     treeStableTimer=60,
                     builderNames=["qa-kvm-tiny"]),

  ]

c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=all_builders))

c['schedulers'].append(Try_Jobdir(name="try",
             builderNames=all_builders,
             jobdir="incoming"))

####### BUILDERS

# QA related configuration

def DownloadQaConfig(config_filename):
  return [
    FileDownload(mastersrc=config_filename,
                 slavedest="qa/qa.json",
                 name="download-qa-definition"),
    FileDownload(mastersrc=os.path.join(SCRIPTS_DIR,
                                        "check-instance-fping"),
                 slavedest="qa/check-instance",
                 mode=0755,
                 name="download-check-instance"),
    ]


def _QaBuild(ssh_service, checkout_mode, make_check):
  configure_args =["--prefix=/usr", "--sysconfdir=/etc",
                   "--localstatedir=/var", "--with-lvm-stripecount=3",
                   "--enable-confd=haskell",
                   "--with-ssh-initscript=service %s" % ssh_service,
                   "--enable-symlinks"]
  if make_check:
    configure_args.append("--enable-haskell-tests")
  steps = [
    GenerateCheckout(MASTER_BRANCH, mode=checkout_mode),
    GenerateAutogen(),
    GenerateConfigure(*configure_args),
    ]

  if make_check:
    steps.append(GenerateMakeCheck(False))
  else:
    steps.append(GenerateMake())

  return steps


QA_VCLUSTER_MACHINES = [
  "snf-69749.vm.okeanos.grnet.gr",
  ]
QA_VCLUSTER_NET_PREFIX = "192.0.2"
QA_VCLUSTER_MIP = "%s.1" % (QA_VCLUSTER_NET_PREFIX, )
QA_VCLUSTER_MND = "lo"

QA_KVM_MACHINES = [
  "snf-192771.vm.okeanos.grnet.gr",
  "snf-192805.vm.okeanos.grnet.gr",
  "snf-192809.vm.okeanos.grnet.gr",
]
QA_KVM_MIP = "192.168.0.101"
QA_KVM_MND = "eth1"

def _QaCmd():
  workdir = "./build/qa"
  env = {
    "PYTHONPATH": "..",
    }
  cmd = ["python", "-u", "./ganeti-qa.py", "--yes-do-it", "qa.json"]

  return (workdir, env, cmd)


def _UploadVClusterQa(base_fn, name_prefix, machines):
  result = base_fn(machines)

  for hostname in machines:
    short_host = GetShortHost(hostname)
    result.extend([
      ShellCommand(command=["ssh", "root@%s" % hostname, "mkdir", "-p", "/srv/ganeti/vcluster"],
                   name="config-mkdir-vcluster-%s" % short_host,
                   description=["creating vcluster directory on", short_host],
                   descriptionDone=["created vcluster directory on", short_host],
                   timeout=180,
                   usePTY=False,
                   haltOnFailure=True),
      ShellCommand(command=["ssh", "root@%s" % hostname, "/usr/lib/ganeti/tools/vcluster-setup",
                            "-c", "90",
                            "-i", "100",
                            "-p", QA_VCLUSTER_NET_PREFIX,
                            "-n", QA_VCLUSTER_MND,
                            "/srv/ganeti/vcluster"],
                   name="config-vcluster-%s" % short_host,
                   description=["configuring vcluster on", short_host],
                   descriptionDone=["configured vcluster on", short_host],
                   timeout=180,
                   usePTY=False,
                   haltOnFailure=True),
      ])

  return result


def StepsForQA(name_prefix, machines, master_ip, master_netdev, mode,
               vcluster_setup, ssh_service):
  if mode == QA_FULL:
    # for full builds, we want a pristine checkout, to be sure there
    # are no leftovers by accident
    make_check = True
    checkout_mode = "clobber"
  elif mode in (QA_QUICK, QA_TINY):
    make_check = False
    checkout_mode = "copy"
  else:
    raise Exception("Unknown QA mode '%s'" % mode)

  name = "%s-%s" % (name_prefix, mode)

  if vcluster_setup:
    upload_fn = \
      functools.partial(_UploadVClusterQa, GenerateUpload, name_prefix)
  else:
    upload_fn = GenerateUpload

  return (name,
          MakeQaSteps(QA_MODE_SRC, machines, master_ip,
                      master_netdev,
                      functools.partial(DownloadQaConfig,
                                        "%s.json" % name),
                      functools.partial(_QaBuild, ssh_service, checkout_mode,
                                        make_check),
                      upload_fn,
                      _QaCmd))


# QA runner for virtual cluster
QA_RUNNERS = [
  ("bot-fedora18-64", "qa-vcluster",
   QA_VCLUSTER_MACHINES, QA_VCLUSTER_MIP, QA_VCLUSTER_MND, True, [QA_TINY], "sshd"),
  ("bot-wheezy64", "qa-kvm",
   QA_KVM_MACHINES, QA_KVM_MIP, QA_KVM_MND, False, [QA_TINY], "ssh"),
  ]


def _MakeQaBuilders():
  for (slavename, name_prefix, machines,
       master_ip, master_netdev, vcluster_setup, modes, ssh_service) in QA_RUNNERS:
    for mode in modes:
      (name, steps) = StepsForQA(name_prefix, machines, master_ip,
                                 master_netdev, mode, vcluster_setup, ssh_service)
      yield {
        "name": name,
        "slavename": slavename,
        "builddir": name,
        "factory": factory.BuildFactory(steps=steps),
        "category": "qa",
        }

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

fdistcheck = factory.BuildFactory(steps=[
  GenerateResetPerms(True),
  GenerateCheckout(MASTER_BRANCH),
  GenerateAutogen(),
  GenerateConfigure("--enable-haskell-tests"),
  GenerateMakeLint(),
  GenerateMakeCheck(True),
  GenerateResetPerms(False),
  ])

builders = [{
  "name": "doclint",
  "slavenames": ["bot-wheezy64"],
  "builddir": "doclint",
  "factory": fdoclint,
  "category": "unittests",
  }]

builders.extend({
  "name": "tests-%s" % name,
  "slavename": "bot-%s" % name,
  "builddir": "unittests-%s" % name,
  "factory": fdistcheck,
  "category": "unittests",
  } for name in test_slaves)

builders.extend(_MakeQaBuilders())

c['builders'] = builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAuth("/srv/buildbot/masters/ganeti/htpasswd"),
    gracefulShutdown = 'auth',
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port="tcp:8010:interface=127.0.0.1",
                                  public_html="/srv/buildbot/public_html",
                                  authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Ganeti"
c['titleURL'] = "http://www.ganeti.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

####### Other global parameters

c['revlink'] = revlinks.RevlinkMatch([
    r'git://git\.ganeti\.org/([^/]+)',
    ], r'http://git.ganeti.org/\1/?a=commit;h=%s')
